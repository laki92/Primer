;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.03.4 Standard
;Automatic Program Generator
;© Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : AktuatorskaMail2014
;Version : 6.0
;Date    : 05/22/2014
;Author  : Srdjan Stankovic
;Company : Memristor
;Comments: 4 servoa AX-12 bez zastite i 6 senzora; Dodati prekidaci za odavir boje i broja protivnika;
;          Podeseni uglovi za nove servoe:
;                                        --- ID4: 450 otovren; 250 zatvoren
;                                        --- ID3: 250 napregnut; 50 opusten
;          Dodati jos za loptice;
;          Rasporedjeno sve po fjalovima
;          Treba dodati datkciju pokreta
;          -Imam setovanje momenta, ali ne odglavljuje na to
;          -pravim da po slanju komande upise 1u movingR, a po stizanju na poziciju 0
;          -Radi sa velikim kasnjenjem u servoMoving od 250ms
;
;Chip type           : ATmega128
;Program type        : Application
;Clock frequency     : 11.059000 MHz
;Memory model        : Small
;External RAM size   : 0
;Data Stack size     : 1024
;*****************************************************/
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "modbus_slave.h"
;#include <stdlib.h>
;#include <delay.h>
;#include <servoi.h>
;#include <inicijalizacija.h>
;#include <uart0.h>
;#include <prekidac.h>
;
;
;/***********************ADC***********************/
;// Standard Input/Output functions
;#include <stdio.h>
;
;#define ADC_VREF_TYPE 0x00
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0032 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0033 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0034 // Delay needed for the stabilization of the ADC input voltage
; 0000 0035 delay_us(10);
;PCODE: $00000012 VOL: 0
; 0000 0036 // Start the AD conversion
; 0000 0037 ADCSRA|=0x40;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0038 // Wait for the AD conversion to complete
; 0000 0039 while ((ADCSRA & 0x10)==0);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 003A ADCSRA|=0x10;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 003B return ADCW;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 003C }
;PCODE: $00000025 VOL: 0
;
;/*****************KONTROLA SMERA MAX485*****************/
;void DirPin(int dir)
; 0000 0040 {
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0041     if(dir==1)
;	dir -> Y+0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0042     {
; 0000 0043         PORTD.4=1;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0044     }
; 0000 0045     else if(dir==0)
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0046     {
; 0000 0047         PORTD.4=0;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0048     }
; 0000 0049 }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;
;void main(void)
; 0000 004C {
;PCODE: $00000039 VOL: 0
; 0000 004D     int vbat;
; 0000 004E // Input/Output Ports initialization
; 0000 004F // Port A initialization
; 0000 0050 // Func7=In Func6=In Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 0051 // State7=T State6=T State5=T State4=0 State3=T State2=T State1=T State0=T
; 0000 0052 PORTA=0x10;
;	vbat -> R16,R17
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0053 DDRA=0x10;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0054 
; 0000 0055 // Port B initialization
; 0000 0056 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0057 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0058 PORTB=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0059 DDRB=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 005A 
; 0000 005B // Port C initialization
; 0000 005C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 005D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 005E PORTC=0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 005F DDRC=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0060 
; 0000 0061 // Port D initialization
; 0000 0062 // Func7=In Func6=In Func5=In Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 0063 // State7=T State6=T State5=T State4=0 State3=T State2=T State1=T State0=T
; 0000 0064 PORTD=0x00;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0065 DDRD=0x10;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0066 
; 0000 0067 // Port E initialization
; 0000 0068 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0069 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 006A PORTE=0x00;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 006B DDRE=0x80;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 006C 
; 0000 006D // Port F initialization
; 0000 006E // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 006F // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0070 PORTF=0x00;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0071 DDRF=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0072 
; 0000 0073 // Port G initialization
; 0000 0074 // Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0075 // State4=T State3=T State2=T State1=T State0=T
; 0000 0076 PORTG=0x00;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0077 DDRG=0x00;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0078 
; 0000 0079 // Timer/Counter 0 initialization
; 0000 007A // Clock source: System Clock
; 0000 007B // Clock value: Timer 0 Stopped
; 0000 007C // Mode: Normal top=FFh
; 0000 007D // OC0 output: Disconnected
; 0000 007E ASSR=0x00;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 007F TCCR0=0x00;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0080 TCNT0=0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0081 OCR0=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0082 
; 0000 0083 // Timer/Counter 1 initialization
; 0000 0084 // Clock source: System Clock
; 0000 0085 // Clock value: 11059.000 kHz
; 0000 0086 // Mode: CTC top=OCR1A
; 0000 0087 // OC1A output: Discon.
; 0000 0088 // OC1B output: Discon.
; 0000 0089 // OC1C output: Discon.
; 0000 008A // Noise Canceler: Off
; 0000 008B // Input Capture on Falling Edge
; 0000 008C // Timer 1 Overflow Interrupt: Off
; 0000 008D // Input Capture Interrupt: Off
; 0000 008E // Compare A Match Interrupt: On
; 0000 008F // Compare B Match Interrupt: Off
; 0000 0090 // Compare C Match Interrupt: Off
; 0000 0091 TCCR1A=0x00;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0092 TCCR1B=0x09;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0093 TCNT1H=0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0094 TCNT1L=0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0095 ICR1H=0x00;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0096 ICR1L=0x00;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0097 OCR1AH=0x2B;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0098 OCR1AL=0x33;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0099 OCR1BH=0x00;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 009A OCR1BL=0x00;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 009B OCR1CH=0x00;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 009C OCR1CL=0x00;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 009D 
; 0000 009E // Timer/Counter 1 initialization
; 0000 009F // Clock source: System Clock
; 0000 00A0 // Clock value: Timer 1 Stopped
; 0000 00A1 // Mode: Normal top=FFFFh
; 0000 00A2 // OC1A output: Discon.
; 0000 00A3 // OC1B output: Discon.
; 0000 00A4 // OC1C output: Discon.
; 0000 00A5 // Noise Canceler: Off
; 0000 00A6 // Input Capture on Falling Edge
; 0000 00A7 // Timer 1 Overflow Interrupt: Off
; 0000 00A8 // Input Capture Interrupt: Off
; 0000 00A9 // Compare A Match Interrupt: Off
; 0000 00AA // Compare B Match Interrupt: Off
; 0000 00AB // Compare C Match Interrupt: Off
; 0000 00AC TCCR1A=0x00;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00AD TCCR1B=0x00;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00AE TCNT1H=0x00;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00AF TCNT1L=0x00;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00B0 ICR1H=0x00;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00B1 ICR1L=0x00;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00B2 OCR1AH=0x00;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00B3 OCR1AL=0x00;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00B4 OCR1BH=0x00;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00B5 OCR1BL=0x00;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00B6 OCR1CH=0x00;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00B7 OCR1CL=0x00;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00B8 
; 0000 00B9 // Timer/Counter 2 initialization
; 0000 00BA // Clock source: System Clock
; 0000 00BB // Clock value: Timer 2 Stopped
; 0000 00BC // Mode: Normal top=FFh
; 0000 00BD // OC2 output: Disconnected
; 0000 00BE TCCR2=0x00;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00BF TCNT2=0x00;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00C0 OCR2=0x00;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00C1 
; 0000 00C2 // Timer/Counter 3 initialization
; 0000 00C3 // Clock source: System Clock
; 0000 00C4 // Clock value: Timer 3 Stopped
; 0000 00C5 // Mode: Normal top=FFFFh
; 0000 00C6 // Noise Canceler: Off
; 0000 00C7 // Input Capture on Falling Edge
; 0000 00C8 // OC3A output: Discon.
; 0000 00C9 // OC3B output: Discon.
; 0000 00CA // OC3C output: Discon.
; 0000 00CB // Timer 3 Overflow Interrupt: Off
; 0000 00CC // Input Capture Interrupt: Off
; 0000 00CD // Compare A Match Interrupt: Off
; 0000 00CE // Compare B Match Interrupt: Off
; 0000 00CF // Compare C Match Interrupt: Off
; 0000 00D0 TCCR3A=0x00;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00D1 TCCR3B=0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00D2 TCNT3H=0x00;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00D3 TCNT3L=0x00;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00D4 ICR3H=0x00;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00D5 ICR3L=0x00;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00D6 OCR3AH=0x00;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00D7 OCR3AL=0x00;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00D8 OCR3BH=0x00;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00D9 OCR3BL=0x00;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00DA OCR3CH=0x00;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00DB OCR3CL=0x00;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00DC 
; 0000 00DD // External Interrupt(s) initialization
; 0000 00DE // INT0: Off
; 0000 00DF // INT1: Off
; 0000 00E0 // INT2: Off
; 0000 00E1 // INT3: Off
; 0000 00E2 // INT4: Off
; 0000 00E3 // INT5: Off
; 0000 00E4 // INT6: Off
; 0000 00E5 // INT7: Off
; 0000 00E6 EICRA=0x00;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00E7 EICRB=0x00;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00E8 EIMSK=0x00;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00E9 
; 0000 00EA // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00EB TIMSK=0x00;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00EC ETIMSK=0x00;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00ED 
; 0000 00EE // USART0 initialization
; 0000 00EF // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00F0 // USART0 Receiver: On
; 0000 00F1 // USART0 Transmitter: On
; 0000 00F2 // USART0 Mode: Asynchronous
; 0000 00F3 // USART0 Baud Rate: 115200
; 0000 00F4 UCSR0A=0x00;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00F5 UCSR0B=0x98;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00F6 UCSR0C=0x06;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00F7 UBRR0H=0x00;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00F8 UBRR0L=0x05;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00F9 
; 0000 00FA // ADC initialization
; 0000 00FB // ADC Clock frequency: 691.188 kHz
; 0000 00FC // ADC Voltage Reference: AREF pin
; 0000 00FD ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00FE ADCSRA=0x84;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00FF 
; 0000 0100 // Analog Comparator initialization
; 0000 0101 // Analog Comparator: Off
; 0000 0102 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0103 ACSR=0x80;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0104 SFIOR=0x00;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0105 
; 0000 0106 // Global enable interrupts
; 0000 0107 #asm("sei")
;PCODE: $000000C8 VOL: 0
	sei
;PCODE: $000000C9 VOL: 0
; 0000 0108 
; 0000 0109 ModbusSlaveInit(1, DirPin);//ime slave, id
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 010A 
; 0000 010B /********************Dogadjaji Coil*********************************/
; 0000 010C ModbusSetCoilChangeEvent(MREZA_C, servo3_func);
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 010D ModbusSetCoilChangeEvent(LOPTICE_C, loptice_func);
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 010E ModbusSetCoilChangeEvent(SERVO3_MOV_CHECK, servo3_moving_func);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 010F ModbusSetCoilChangeEvent(SERVO4_MOV_CHECK, servo4_moving_func);
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0110 
; 0000 0111 /******************Dogadjaji Register*******************************/
; 0000 0112 ModbusSetRegisterChangeEvent(POZICIJA_SERVO_4_R, servo4_func);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0113 
; 0000 0114 lopticeMaxon = 1;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0115 
; 0000 0116 while (1)
;PCODE: $000000EA VOL: 0
; 0000 0117       {
; 0000 0118         ModbusEventDispatcher();
;PCODE: $000000EB VOL: 0
; 0000 0119 
; 0000 011A         /************Napon baterije***************/
; 0000 011B         vbat=read_adc(4);
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 011C         vbat=10*(kostantaVbat*vbat);
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 011D 
; 0000 011E         ModbusSetRegister(VBAT_R,vbat);
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 011F 
; 0000 0120         /************Senzori***************/
; 0000 0121         if(sensor1==1)
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0122             ModbusSetCoil(SENSOR1,1);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0123         else
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0124             ModbusSetCoil(SENSOR1,0);
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 0125 
; 0000 0126         if(sensor2==1)
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0127             ModbusSetCoil(SENSOR2,1);
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 0128         else
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 0129             ModbusSetCoil(SENSOR2,0);
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 012A 
; 0000 012B         if(sensor3==1)
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 012C             ModbusSetCoil(SENSOR3,1);
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 012D         else
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 012E             ModbusSetCoil(SENSOR3,0);
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 012F 
; 0000 0130         if(sensor4==1)
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 0131             ModbusSetCoil(SENSOR4,1);
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 0132         else
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 0133             ModbusSetCoil(SENSOR4,0);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 0134 
; 0000 0135         if(sensor5==1)
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 0136             ModbusSetCoil(SENSOR5,1);
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 0137         else
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 0138             ModbusSetCoil(SENSOR5,0);
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0139 
; 0000 013A         if(sensor6==1)
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 013B             ModbusSetCoil(SENSOR6,1);
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 013C         else
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 013D             ModbusSetCoil(SENSOR6,0);
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 013E 
; 0000 013F 
; 0000 0140         /************prekidaci**************/
; 0000 0141         if(prekidac1==1)
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 0142             ModbusSetCoil(PREKIDAC1,1);
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 0143         else
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0144             ModbusSetCoil(PREKIDAC1,0);
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 0145 
; 0000 0146         if(prekidac2==1)
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 0147             ModbusSetCoil(PREKIDAC2,1);
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 0148         else
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 0149             ModbusSetCoil(PREKIDAC2,0);
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 014A       };
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 014B }
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
