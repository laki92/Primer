;#include "modbus_atmega.h"
;
;#if defined _ATMEGA8_
;#include "mega8.h"
;#elif defined _ATMEGA16_
;#include "mega16.h"
;#elif defined _ATMEGA32_
;#include "mega32.h"
;#elif defined _ATMEGA64_
;#include "mega64.h"
;#elif defined _ATMEGA128_
;#include "mega128.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#endif
;
;#if defined _ATMEGA8_ || defined _ATMEGA16_ || defined _ATMEGA32_
;#define __USART_RXC__ USART_RXC
;#define __USART_TXC__ USART_TXC
;#define __UDR__ UDR
;#define __UBRRH__ UBRRH
;#define __UBRRL__ UBRRL
;#define __UCSRA__ UCSRA
;#define __UCSRB__ UCSRB
;#define __UCSRC__ UCSRC
;#elif defined _ATMEGA64_ || defined _ATMEGA128_
;#if defined _UART0_
;#define __USART_RXC__ USART0_RXC
;#define __USART_TXC__ USART0_TXC
;#define __UDR__ UDR0
;#define __UBRRH__ UBRR0H
;#define __UBRRL__ UBRR0L
;#define __UCSRA__ UCSR0A
;#define __UCSRB__ UCSR0B
;#define __UCSRC__ UCSR0C
;#elif defined _UART1_
;#define __USART_RXC__ USART1_RXC
;#define __USART_TXC__ USART1_TXC
;#define __UDR__ UDR1
;#define __UBRRH__ UBRR1H
;#define __UBRRL__ UBRR1L
;#define __UCSRA__ UCSR1A
;#define __UCSRB__ UCSR1B
;#define __UCSRC__ UCSR1C
;#endif
;#endif
;
;#define UPE 2
;#define OVR 3
;#define FE 4
;#define UDRE 5
;#define RXC 7
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<OVR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;void (*DirPinFunction)(int val);
;void (*ModbusMainFunction)(void);
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 64
;char rx_buffer[RX_BUFFER_SIZE];
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;// USART Receiver interrupt service routine
;interrupt [__USART_RXC__] void usart_rx_isr(void)
; 0001 0045 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0046     char status,data;
; 0001 0047     status=__UCSRA__;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0001 0048     data=__UDR__;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0001 0049     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0001 004A     {
; 0001 004B         rx_buffer[rx_wr_index]=data;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0001 004C         if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0001 004D         if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0001 004E         {
; 0001 004F             rx_counter=0;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0001 0050             rx_buffer_overflow=1;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0001 0051         };
;PCODE: $00000031 VOL: 0
; 0001 0052 
; 0001 0053         if(ModbusMainFunction != 0)
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0001 0054         {
; 0001 0055             ModbusMainFunction();
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0001 0056         }
; 0001 0057     };
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0001 0058 
; 0001 0059 }
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 64
;char tx_buffer[TX_BUFFER_SIZE];
;unsigned char tx_wr_index,tx_rd_index,tx_counter;
;// USART Transmitter interrupt service routine
;interrupt [__USART_TXC__] void usart_tx_isr(void)
; 0001 0061 {
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0001 0062     if (tx_counter)
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0001 0063     {
; 0001 0064         --tx_counter;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0001 0065         __UDR__=tx_buffer[tx_rd_index];
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0001 0066         if (++tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0001 0067     }
;PCODE: $00000051 VOL: 0
; 0001 0068     else
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0001 0069     {
; 0001 006A         if(DirPinFunction != 0)
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0001 006B         {
; 0001 006C             DirPinFunction(0);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0001 006D         }
; 0001 006E     }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0001 006F }
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;
;void ModbusUartInit(void (*DirPinFunc)(int), void (*ModbusMainFunc)(void))
; 0001 0072 {
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0001 0073     DirPinFunction = DirPinFunc;
;	*DirPinFunc -> Y+2
;	*ModbusMainFunc -> Y+0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0001 0074     ModbusMainFunction = ModbusMainFunc;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0001 0075 
; 0001 0076     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0001 0077     // USART Receiver: On
; 0001 0078     // USART Transmitter: On
; 0001 0079     __UCSRA__ = 0x00;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0001 007A     __UCSRB__ = 0xD8;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0001 007B     __UCSRC__ = 0x86;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0001 007C     __UBRRH__ = (MODBUS_OSC/(16*MODBUS_BAUDRATE)-1)>>8;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0001 007D     __UBRRL__ = (MODBUS_OSC/(16*MODBUS_BAUDRATE)-1)&0xFF;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0001 007E }
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;
;int ModbusUartGetChar(char *data)
; 0001 0081 {
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0001 0082     if(rx_counter!=0)
;	*data -> Y+0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0001 0083     {
; 0001 0084         *data=rx_buffer[rx_rd_index];
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0001 0085         if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0001 0086     	#if (MODBUS_USE_INTERRUPT == 0)
; 0001 0087 	#asm("cli")
; 0001 0088 	#endif
; 0001 0089 	--rx_counter;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0001 008A     	#if (MODBUS_USE_INTERRUPT == 0)
; 0001 008B 	#asm("sei")
; 0001 008C 	#endif
; 0001 008D 
; 0001 008E         return 1;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0001 008F     }
; 0001 0090     return 0;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0001 0091 }
;PCODE: $00000090 VOL: 0
;
;int ModbusUartPutChar(char c)
; 0001 0094 {
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0001 0095     if(tx_counter != TX_BUFFER_SIZE)
;	c -> Y+0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0001 0096     {
; 0001 0097 
; 0001 0098     	#if (MODBUS_USE_INTERRUPT == 0)
; 0001 0099 	#asm("cli")
; 0001 009A 	#endif
; 0001 009B         if (tx_counter || ((__UCSRA__ & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0001 009C         {
; 0001 009D             tx_buffer[tx_wr_index]=c;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0001 009E             if (++tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0001 009F             ++tx_counter;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0001 00A0         }
; 0001 00A1         else
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0001 00A2         {
; 0001 00A3             if(DirPinFunction != 0)
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0001 00A4             {
; 0001 00A5                 DirPinFunction(1);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0001 00A6             }
; 0001 00A7             __UDR__=c;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0001 00A8         }
;PCODE: $000000BB VOL: 0
; 0001 00A9     	#if (MODBUS_USE_INTERRUPT == 0)
; 0001 00AA 	#asm("sei")
; 0001 00AB 	#endif
; 0001 00AC 
; 0001 00AD         return 1;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0001 00AE     }
; 0001 00AF     return 0;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0001 00B0 }
;PCODE: $000000C3 VOL: 0
;
;int ModbusUartPutString(char *s, unsigned int count)
; 0001 00B3 {
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0001 00B4     int i;
; 0001 00B5     for(i = 0; i < count; i++)
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;	*s -> Y+4
;	count -> Y+2
;	i -> R16,R17
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0001 00B6     {
; 0001 00B7         if(ModbusUartPutChar(s[i]) == 0)
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0001 00B8         {
; 0001 00B9             break;
;PCODE: $000000D9 VOL: 0
; 0001 00BA         }
; 0001 00BB     }
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0001 00BC     return i;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0001 00BD }
;PCODE: $000000E7 VOL: 0
